import {
  Autocomplete,
  Box,
  Chip,
  Input,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  TextField,
  Typography,
} from "@mui/material";
import React, { FC, useState } from "react";
import { Control, Controller, UseFormSetValue } from "react-hook-form";
import { UseFormGetValues } from "react-hook-form/dist/types/form";
import { useAsync } from "react-use";

import { aironeApiClientV2 } from "../../apiclient/AironeApiClientV2";
import { Role, RoleGroup, RoleUser } from "../../apiclient/autogenerated";

interface Props {
  control: Control<Role>;
  setValue: UseFormSetValue<Role>;
  getValues: UseFormGetValues<Role>;
}

export const RoleForm: FC<Props> = ({ control, setValue, getValues }) => {
  const [userKeyword, setUserKeyword] = useState("");
  const [adminUserKeyword, setAdminUserKeyword] = useState("");

  // TODO implement pagination and incremental search
  const groups = useAsync(async () => {
    const _groups = await aironeApiClientV2.getGroups();
    return _groups.map(
      (group): RoleGroup => ({ id: group.id, name: group.name })
    );
  });
  const adminUsers = useAsync(async () => {
    const _users = await aironeApiClientV2.getUsers(1, adminUserKeyword);
    return _users.results?.map(
      (user): RoleUser => ({ id: user.id, username: user.username })
    );
  }, [adminUserKeyword]);
  const users = useAsync(async () => {
    const _users = await aironeApiClientV2.getUsers(1, userKeyword);
    return _users.results?.map(
      (user): RoleUser => ({ id: user.id, username: user.username })
    );
  }, [userKeyword]);

  return (
    <Box>
      <Box>
        <Table className="table table-bordered">
          <TableHead>
            <TableRow sx={{ backgroundColor: "#455A64" }}>
              <TableCell sx={{ color: "#FFFFFF" }}>項目</TableCell>
              <TableCell sx={{ color: "#FFFFFF" }}>内容</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            <TableRow>
              <TableCell>ロール名</TableCell>
              <TableCell>
                <Controller
                  name="name"
                  control={control}
                  defaultValue=""
                  render={({ field }) => (
                    <Input {...field} sx={{ width: "100%" }} />
                  )}
                />
              </TableCell>
            </TableRow>
            <TableRow>
              <TableCell>備考</TableCell>
              <TableCell>
                <Controller
                  name="description"
                  control={control}
                  defaultValue=""
                  render={({ field }) => (
                    <Input {...field} sx={{ width: "100%" }} />
                  )}
                />
              </TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </Box>

      <Box mt="64px">
        <Box my="32px">
          <Typography variant="h4" align="center" my="16px">
            ユーザ/グループを登録
          </Typography>
          <Typography variant="h6" align="center" my="16px">
            ロール管理するグループまたはユーザを登録してください。
          </Typography>
        </Box>

        <Box my="64px">
          <Typography align="left" my="8px">
            グループ登録
          </Typography>
          <Table>
            <TableHead>
              <TableRow sx={{ backgroundColor: "#455A64" }}>
                <TableCell sx={{ color: "#FFFFFF" }}>項目</TableCell>
                <TableCell sx={{ color: "#FFFFFF" }}>内容</TableCell>
                <TableCell />
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell>管理者</TableCell>
                <TableCell>
                  <Controller
                    name="adminGroups"
                    control={control}
                    defaultValue={[]}
                    render={({ field }) => (
                      <Autocomplete
                        {...field}
                        options={groups.value ?? []}
                        getOptionLabel={(option: RoleGroup) => option.name}
                        isOptionEqualToValue={(option, value) =>
                          option.id === value.id
                        }
                        renderInput={(params) => (
                          <TextField {...params} variant="outlined" />
                        )}
                        renderTags={(value, getTagProps) =>
                          value.map((option, index) => (
                            <Box key={option.id}>
                              {(getValues("groups") as RoleGroup[]).some(
                                (u) => u.id == option.id
                              ) ? (
                                <Chip
                                  label={option.name}
                                  color="error"
                                  {...getTagProps({ index })}
                                />
                              ) : (
                                <Chip
                                  label={option.name}
                                  {...getTagProps({ index })}
                                />
                              )}
                            </Box>
                          ))
                        }
                        onChange={(_e, value: RoleGroup[]) =>
                          setValue("adminGroups", value)
                        }
                        multiple
                      />
                    )}
                  />
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>メンバー</TableCell>
                <TableCell>
                  <Controller
                    name="groups"
                    control={control}
                    defaultValue={[]}
                    render={({ field }) => (
                      <Autocomplete
                        {...field}
                        options={groups.value ?? []}
                        getOptionLabel={(option: RoleGroup) => option.name}
                        isOptionEqualToValue={(option, value) =>
                          option.id === value.id
                        }
                        renderInput={(params) => (
                          <TextField {...params} variant="outlined" />
                        )}
                        renderTags={(value, getTagProps) =>
                          value.map((option, index) => (
                            <Box key={option.id}>
                              {(getValues("adminGroups") as RoleGroup[]).some(
                                (u) => u.id == option.id
                              ) ? (
                                <Chip
                                  label={option.name}
                                  color="error"
                                  {...getTagProps({ index })}
                                />
                              ) : (
                                <Chip
                                  label={option.name}
                                  {...getTagProps({ index })}
                                />
                              )}
                            </Box>
                          ))
                        }
                        onChange={(_e, value: RoleGroup[]) =>
                          setValue("groups", value)
                        }
                        multiple
                      />
                    )}
                  />
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </Box>

        <Box my="64px">
          <Typography align="left" my="8px">
            ユーザ登録
          </Typography>
          <Table>
            <TableHead>
              <TableRow sx={{ backgroundColor: "#455A64" }}>
                <TableCell sx={{ color: "#FFFFFF" }}>項目</TableCell>
                <TableCell sx={{ color: "#FFFFFF" }}>内容</TableCell>
                <TableCell />
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell>管理者</TableCell>
                <TableCell>
                  <Controller
                    name="adminUsers"
                    control={control}
                    defaultValue={[]}
                    render={({ field }) => (
                      <Autocomplete
                        {...field}
                        options={adminUsers.value ?? []}
                        getOptionLabel={(option: RoleUser) => option.username}
                        isOptionEqualToValue={(option, value) =>
                          option.id === value.id
                        }
                        inputValue={adminUserKeyword}
                        renderInput={(params) => (
                          <TextField {...params} variant="outlined" />
                        )}
                        renderTags={(value, getTagProps) =>
                          value.map((option, index) => (
                            <Box key={option.id}>
                              {(getValues("users") as RoleUser[]).some(
                                (u) => u.id == option.id
                              ) ? (
                                <Chip
                                  label={option.username}
                                  color="error"
                                  {...getTagProps({ index })}
                                />
                              ) : (
                                <Chip
                                  label={option.username}
                                  {...getTagProps({ index })}
                                />
                              )}
                            </Box>
                          ))
                        }
                        onChange={(_e, value: RoleUser[]) =>
                          setValue("adminUsers", value)
                        }
                        onInputChange={(_event, value: string) =>
                          setAdminUserKeyword(value)
                        }
                        multiple
                      />
                    )}
                  />
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>メンバー</TableCell>
                <TableCell>
                  <Controller
                    name="users"
                    control={control}
                    defaultValue={[]}
                    render={({ field }) => (
                      <Autocomplete
                        {...field}
                        options={users.value ?? []}
                        getOptionLabel={(option: RoleUser) => option.username}
                        isOptionEqualToValue={(option, value) =>
                          option.id === value.id
                        }
                        inputValue={userKeyword}
                        renderInput={(params) => (
                          <TextField {...params} variant="outlined" />
                        )}
                        renderTags={(value, getTagProps) =>
                          value.map((option, index) => (
                            <Box key={option.id}>
                              {(getValues("adminUsers") as RoleUser[]).some(
                                (u) => u.id == option.id
                              ) ? (
                                <Chip
                                  label={option.username}
                                  color="error"
                                  {...getTagProps({ index })}
                                />
                              ) : (
                                <Chip
                                  label={option.username}
                                  {...getTagProps({ index })}
                                />
                              )}
                            </Box>
                          ))
                        }
                        onChange={(_e, value: RoleUser[]) =>
                          setValue("users", value)
                        }
                        onInputChange={(_event, value: string) =>
                          setUserKeyword(value)
                        }
                        multiple
                      />
                    )}
                  />
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </Box>
      </Box>
    </Box>
  );
};

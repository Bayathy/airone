import {
  Autocomplete,
  Box,
  Input,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  TextField,
  Typography,
} from "@mui/material";
import React, { FC, useEffect, useState } from "react";
import { useAsync } from "react-use";

import { aironeApiClientV2 } from "../../apiclient/AironeApiClientV2";
import { Role, RoleGroup, RoleUser } from "../../apiclient/autogenerated";

interface Props {
  role: Role;
  setRole: (role: Role) => void;
  setSubmittable: (isSubmittable: boolean) => void;
}

export const RoleForm: FC<Props> = ({ role, setRole, setSubmittable }) => {
  const [userKeyword, setUserKeyword] = useState("");
  const [adminUserKeyword, setAdminUserKeyword] = useState("");

  const groups = useAsync(async () => {
    const _groups = await aironeApiClientV2.getGroups();
    return _groups.map(
      (group): RoleGroup => ({ id: group.id, name: group.name })
    );
  });
  const users = useAsync(async () => {
    const _users = await aironeApiClientV2.getUsers(1, userKeyword);
    return _users.results?.map(
      (user): RoleUser => ({ id: user.id, username: user.username })
    );
  }, [userKeyword]);

  const checkSubmittable = (): boolean => {
    if (role.name === "") {
      return false;
    }
    return (
      role.adminUsers.length > 0 ||
      role.adminGroups.length > 0
    );
  };

  useEffect(() => {
    setSubmittable(checkSubmittable());
  }, [role]);

  return (
    <Box>
      <Box>
        <Table className="table table-bordered">
          <TableHead>
            <TableRow sx={{ backgroundColor: "#455A64" }}>
              <TableCell sx={{ color: "#FFFFFF" }}>項目</TableCell>
              <TableCell sx={{ color: "#FFFFFF" }}>内容</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            <TableRow>
              <TableCell>ロール名</TableCell>
              <TableCell>
                <Input
                  value={role.name}
                  onChange={(e) => setRole({ ...role, name: e.target.value })}
                  sx={{ width: "100%" }}
                />
              </TableCell>
            </TableRow>
            <TableRow>
              <TableCell>備考</TableCell>
              <TableCell>
                <Input
                  value={role.description}
                  onChange={(e) =>
                    setRole({ ...role, description: e.target.value })
                  }
                  sx={{ width: "100%" }}
                />
              </TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </Box>

      <Box mt="64px">
        <Box my="32px">
          <Typography variant="h4" align="center" my="16px">
            ユーザ/グループを登録
          </Typography>
          <Typography variant="h6" align="center" my="16px">
            ロール管理するグループまたはユーザを登録してください。
          </Typography>
        </Box>

        <Box my="64px">
          <Typography align="left" my="8px">
            グループ登録
          </Typography>
          <Table>
            <TableHead>
              <TableRow sx={{ backgroundColor: "#455A64" }}>
                <TableCell sx={{ color: "#FFFFFF" }}>項目</TableCell>
                <TableCell sx={{ color: "#FFFFFF" }}>内容</TableCell>
                <TableCell />
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell>管理者</TableCell>
                <TableCell>
                  <Autocomplete
                    renderInput={(params) => (
                      <TextField {...params} variant="outlined" />
                    )}
                    options={groups.value ?? []}
                    getOptionLabel={(option: RoleGroup) => option.name}
                    value={role.adminGroups}
                    onChange={(_, value: RoleGroup[]) =>
                      setRole({ ...role, adminGroups: value })
                    }
                    isOptionEqualToValue={(option, value) =>
                      option.id === value.id
                    }
                    multiple
                  />
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>メンバー</TableCell>
                <TableCell>
                  <Autocomplete
                    renderInput={(params) => (
                      <TextField {...params} variant="outlined" />
                    )}
                    options={groups.value ?? []}
                    getOptionLabel={(option: RoleGroup) => option.name}
                    value={role.groups}
                    onChange={(_, value: RoleGroup[]) =>
                      setRole({ ...role, groups: value })
                    }
                    isOptionEqualToValue={(option, value) =>
                      option.id === value.id
                    }
                    multiple
                  />
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </Box>

        <Box my="64px">
          <Typography align="left" my="8px">
            ユーザ登録
          </Typography>
          <Table>
            <TableHead>
              <TableRow sx={{ backgroundColor: "#455A64" }}>
                <TableCell sx={{ color: "#FFFFFF" }}>項目</TableCell>
                <TableCell sx={{ color: "#FFFFFF" }}>内容</TableCell>
                <TableCell />
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell>管理者</TableCell>
                <TableCell>
                  <Autocomplete
                    renderInput={(params) => (
                      <TextField {...params} variant="outlined" />
                    )}
                    options={users.value ?? []}
                    getOptionLabel={(option: RoleUser) => option.username}
                    value={role.adminUsers}
                    onChange={(_, value: RoleUser[]) =>
                      setRole({ ...role, adminUsers: value })
                    }
                    isOptionEqualToValue={(option, value) =>
                      option.id === value.id
                    }
                    inputValue={adminUserKeyword}
                    onInputChange={(_, value: string) =>
                      setAdminUserKeyword(value)
                    }
                    multiple
                  />
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>メンバー</TableCell>
                <TableCell>
                  <Autocomplete
                    renderInput={(params) => (
                      <TextField {...params} variant="outlined" />
                    )}
                    options={users.value ?? []}
                    getOptionLabel={(option: RoleUser) => option.username}
                    value={role.users}
                    onChange={(_, value: RoleUser[]) =>
                      setRole({ ...role, users: value })
                    }
                    isOptionEqualToValue={(option, value) =>
                      option.id === value.id
                    }
                    inputValue={userKeyword}
                    onInputChange={(_, value: string) => setUserKeyword(value)}
                    multiple
                  />
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </Box>
      </Box>
    </Box>
  );
};

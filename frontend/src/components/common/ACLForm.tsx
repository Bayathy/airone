import {
  Box,
  MenuItem,
  Select,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Typography,
} from "@mui/material";
import React, { FC, useEffect } from "react";
import { Control, Controller } from "react-hook-form";
import {UseFormGetValues} from "react-hook-form/dist/types/form";

import { ACLRole } from "../../apiclient/autogenerated";
import { Schema } from "../../components/acl/ACLFormSchema";

import { DjangoContext } from "services/DjangoContext";

interface AclInfo {
  isPublic: boolean;
  permissions: Record<number, ACLRole>;
  defaultPermission?: number;
}

interface Props {
  aclInfo: AclInfo;
  setACLInfo: (aclInfo: AclInfo) => void;
  setSubmittable: (isSubmittable: boolean) => void;
  control: Control<Schema>;
  getValues: UseFormGetValues<Schema>;
  watch: any;
}

export const ACLForm: FC<Props> = ({
  setSubmittable,
  aclInfo,
  setACLInfo,
  control,
  getValues,
  watch,
}) => {
  const djangoContext = DjangoContext.getInstance();

  const checkSubmittable = () => {
    if (aclInfo.isPublic) {
      return true;
    }
    if (
      aclInfo.defaultPermission ??
      0 & (djangoContext?.aclTypes.full.value ?? 0)
    ) {
      return true;
    }
    return Object.values(aclInfo.permissions).some(
      (permission) =>
        permission.currentPermission & (djangoContext?.aclTypes.full.value ?? 0)
    );
  };

  useEffect(() => {
    setSubmittable(checkSubmittable());
  });

  return (
    <Box>
      <Table className="table table-bordered">
        <TableHead>
          <TableRow sx={{ backgroundColor: "#455A64" }}>
            <TableCell sx={{ color: "#FFFFFF" }}>項目</TableCell>
            <TableCell sx={{ color: "#FFFFFF" }}>内容</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell>公開設定</TableCell>
            <TableCell>
              {/* TODO fix width */}
              <Controller
                name="isPublic"
                control={control}
                defaultValue={true}
                render={({ field, fieldState: { error } }) => (
                  <Select
                    {...field}
                    fullWidth={true}
                    value={field.value ? 1 : 0}
                    onChange={(e) => field.onChange(e.target.value === 1)}
                  >
                    <MenuItem value={1}>公開</MenuItem>
                    <MenuItem value={0}>限定公開</MenuItem>
                  </Select>
                )}
              />
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>

      <Box>
        {!watch("isPublic") && (
          <>
            <Box my="32px">
              <Typography variant="h4" align="center">
                公開制限設定
              </Typography>
            </Box>

            <Table className="table table-bordered">
              <TableHead>
                <TableRow sx={{ backgroundColor: "#455A64" }}>
                  <TableCell sx={{ color: "#FFFFFF" }}>ロール</TableCell>
                  <TableCell sx={{ color: "#FFFFFF" }}>備考</TableCell>
                  <TableCell />
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <TableCell>全員</TableCell>
                  <TableCell />
                  <TableCell>
                    <Select
                      fullWidth={true}
                      value={aclInfo.defaultPermission}
                      onChange={(e) =>
                        setACLInfo({
                          ...aclInfo,
                          defaultPermission: Number(e.target.value),
                        })
                      }
                    >
                      {Object.keys(djangoContext?.aclTypes ?? {}).map(
                        (key, index) => (
                          <MenuItem
                            key={index}
                            value={djangoContext?.aclTypes[key].value}
                          >
                            {djangoContext?.aclTypes[key].name}
                          </MenuItem>
                        )
                      )}
                    </Select>
                  </TableCell>
                </TableRow>
                {Object.keys(aclInfo.permissions)
                  .map((key) => Number(key))
                  .map((key, index) => (
                    <TableRow key={index}>
                      <TableCell>{aclInfo.permissions[key].name}</TableCell>
                      <TableCell>
                        {aclInfo.permissions[key].description}
                      </TableCell>
                      <TableCell>
                        <Select
                          fullWidth={true}
                          value={aclInfo.permissions[key].currentPermission}
                          onChange={(e) =>
                            setACLInfo({
                              ...aclInfo,
                              permissions: {
                                ...aclInfo.permissions,
                                [key]: {
                                  ...aclInfo.permissions[key],
                                  currentPermission: Number(e.target.value),
                                },
                              },
                            })
                          }
                        >
                          <MenuItem value={0}>(未設定)</MenuItem>
                          {Object.keys(djangoContext?.aclTypes ?? {}).map(
                            (key, index) => (
                              <MenuItem
                                key={index}
                                value={djangoContext?.aclTypes[key].value}
                              >
                                {djangoContext?.aclTypes[key].name}
                              </MenuItem>
                            )
                          )}
                        </Select>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
          </>
        )}
      </Box>
    </Box>
  );
};

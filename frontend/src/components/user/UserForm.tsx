import {
  Box,
  Button,
  Checkbox,
  Container,
  Divider,
  IconButton,
  Input,
  InputBase,
  InputAdornment,
  Paper,
  Table,
  TableContainer,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  TextField,
  Theme,
  Typography,
} from "@mui/material";

import RefreshIcon from '@mui/icons-material/Refresh';

import { makeStyles } from "@mui/styles";
import React, { FC, useState } from "react";
import { useHistory } from "react-router-dom";

import { UserRetrieve as User } from "../../apiclient/autogenerated";

import { usersPath } from "Routes";
import {
  createUser,
  refreshAccessToken,
  updateUser,
} from "utils/AironeAPIClient";
import { DjangoContext } from "utils/DjangoContext";
import { styled } from "@mui/material/styles";


const useStyles = makeStyles<Theme>((theme) => ({
  button: {
    margin: theme.spacing(1),
  },
  tokenLifetime: {
    display: "flex",
  },
}));

interface Props {
  user?: User;
}

const StyledTableRow = styled(TableRow)(() => ({
  "&:nth-of-type(odd)": {
    backgroundColor: "#607D8B0A",
  },
  "&:last-child td, &:last-child th": {
    border: 0,
  },
}));

const InputBox: FC = ({children}) => {
  return (
    <Box component="form"
     sx={{ m: 1, p: '2px 4px', display: 'flex', alignItems: 'center', width: '90%' }}>
     { children }
    </Box>
  );
}

const ElemChangingPassword: FC = () => {
  return (
    <StyledTableRow>
      <TableCell sx={{ width: "400px", wordBreak: "break-word" }}>
        パスワード変更
      </TableCell>
      <TableCell
        sx={{ width: "750px", p: "0px", wordBreak: "break-word" }}
      >
        <InputBox>
          <Button variant="contained">パスワードの再設定</Button>
        </InputBox>
      </TableCell>
    </StyledTableRow>
  );
}

const ElemAuthenticationMethod: FC = () => {
  return (
    <StyledTableRow>
      <TableCell sx={{ width: "400px", wordBreak: "break-word" }}>
        認証方法
      </TableCell>
      <TableCell
        sx={{ width: "750px", p: "0px", wordBreak: "break-word" }}
      >
        <InputBox>
          {/* FIXME: to change its display by response of API calling */}
          LDAP 認証 / ローカル認証 (FIXME)
        </InputBox>
      </TableCell>
    </StyledTableRow>
  );
}

const ElemAccessTokenConfiguration: FC = () => {
  return (
    <StyledTableRow>
      <TableCell sx={{ width: "400px", wordBreak: "break-word" }}>
        アクセストークンの有効期限設定
      </TableCell>
      <TableCell
        sx={{ width: "750px", p: "0px", wordBreak: "break-word" }}
      >
        <InputBox>
          <Box sx={{ flexDirecton: "column"}}>

          <Box sx={{ pb: "20px" }}>
            <TextField
              label="With normal TextField"
              id="outlined-start-adornment"
              InputProps={{
                endAdornment: <InputAdornment position="end">秒</InputAdornment>,
              }}
              variant="standard"
             />
          </Box>

          <Box>
             <TextField
               disabled
               label="作成日"
               id="outlined-start-adornment"
               variant="standard"
               value="2022/09/15 11:29:30"
               InputProps={{ disableUnderline: true }}
              />

             <TextField
               disabled
               label="有効期限"
               id="outlined-start-adornment"
               variant="standard"
               value="無期限"
               InputProps={{ disableUnderline: true }}
              />
          </Box>

          </Box>

        </InputBox>
      </TableCell>
    </StyledTableRow>
  );
}

const ElemAccessToken: FC = () => {
  return (
    <StyledTableRow>
      <TableCell sx={{ width: "400px", wordBreak: "break-word" }}>
        アクセストークン
      </TableCell>
      <TableCell
        sx={{ width: "750px", p: "0px", wordBreak: "break-word" }}
      >
        <InputBox>
          <Input
            sx={{ width: "90%" }}
            placeholder="右側の更新ボタンを押してトークンをリフレッシュさせてください"
            inputProps={{ 'aria-label': 'search google maps' }}
          />
          <IconButton type="button" sx={{ p: '10px' }} aria-label="search">
            <RefreshIcon />
          </IconButton>
        </InputBox>

      </TableCell>
    </StyledTableRow>
  );
}

const ElemEmailAddress: FC = () => {
  return (
    <StyledTableRow>
      <TableCell sx={{ width: "400px", wordBreak: "break-word" }}>
        メールアドレス　
      </TableCell>
      <TableCell
        sx={{ width: "750px", p: "0px", wordBreak: "break-word" }}
      >
        <InputBox>
          <Input
            type="text"
            placeholder="メールアドレスを入力してください"
            sx={{ width: "100%"}}
            onChange={(e) => {console.log(e.target.value);}}
          />
        </InputBox>
      </TableCell>
    </StyledTableRow>
  );
}


const ElemUserName: FC = () => {
  return (
    <StyledTableRow>
      <TableCell sx={{ width: "400px", wordBreak: "break-word" }}>
        名前
      </TableCell>
      <TableCell
        sx={{ width: "750px", p: "0px", wordBreak: "break-word" }}
      >
        <InputBox>
          <Input
            type="text"
            placeholder="ユーザ名を入力してください"
            sx={{ width: "100%"}}
            onChange={(e) => {console.log(e.target.value);}}
          />
        </InputBox>
      </TableCell>
    </StyledTableRow>
  );
}


export const UserForm: FC<Props> = ({ user }) => {
  const classes = useStyles();
  const history = useHistory();

  const isCreateMode = user?.id === undefined;
  const [username, setUsername] = useState(user?.username ?? "");
  const [email, setEmail] = useState(user?.email ?? "");
  const [password, setPassword] = useState(isCreateMode ? "" : undefined);
  const [isSuperuser, setIsSuperuser] = useState<boolean>(
    user?.isSuperuser ?? false
  );
  const [tokenLifetime, setTokenLifetime] = useState(user?.token?.lifetime);

  const djangoContext = DjangoContext.getInstance();

  const handleSubmit = (event) => {
    if (isCreateMode) {
      createUser(username, email, password, isSuperuser, tokenLifetime).then(
        () => history.replace(usersPath())
      );
    } else {
      updateUser(user.id, username, email, isSuperuser, tokenLifetime).then(
        () => history.replace(usersPath())
      );
    }
    event.preventDefault();
  };

  const handleRefreshAccessToken = async () => {
    await refreshAccessToken();
    history.go(0);
  };

  return (
    <Container maxWidth="lg" sx={{ pt: "50px", pb: "50px" }}>
      <TableContainer component={Paper}>
        <Table className="table table-bordered">
          <TableHead>
            <TableRow sx={{ backgroundColor: "#455A64" }}>
              <TableCell sx={{ color: "#FFFFFF" }}>項目</TableCell>
              <TableCell sx={{ color: "#FFFFFF" }}>内容</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>

            <ElemUserName />

            <ElemEmailAddress />

            <ElemAccessToken />
            <ElemAccessTokenConfiguration />

            <ElemAuthenticationMethod />

            <ElemChangingPassword />

          </TableBody>
        </Table>
      </TableContainer>
    </Container>
  );
};

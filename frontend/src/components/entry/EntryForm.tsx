import {
  Box,
  Input,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
} from "@mui/material";
import React, { FC, useState } from "react";
import { useHistory } from "react-router-dom";

import { initializeEditableEntryAttr } from "./EditableEntryAttrs";

import { entityEntriesPath } from "Routes";
import { aironeApiClientV2 } from "apiclient/AironeApiClientV2";
import { EntryRetrieveAttrs } from "apiclient/autogenerated/models/EntryRetrieveAttrs";
import { EditAttributeValue } from "components/entry/EditAttributeValue";
import { getAttrReferrals } from "utils/AironeAPIClient";
import { DjangoContext } from "utils/DjangoContext";

interface Props {
  entityId: number;
  entryId?: number;
  initName?: string;
  initAttributes?: EntryRetrieveAttrs[];
}

export const EntryForm: FC<Props> = ({
  entityId,
  entryId,
  initName = "",
  initAttributes = [],
}) => {
  const djangoContext = DjangoContext.getInstance();
  const history = useHistory();

  const [name, setName] = useState(initName);
  const [attributes, setAttributes] = useState(
    initializeEditableEntryAttr(initAttributes)
  );

  const handleChangeAttribute = (event, name: string, valueInfo) => {
    switch (valueInfo.type) {
      case djangoContext.attrTypeValue.string:
      case djangoContext.attrTypeValue.date:
      case djangoContext.attrTypeValue.text:
        attributes[name].value.asString = valueInfo.value;
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.boolean:
        attributes[name].value.asBoolean = valueInfo.checked;
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.object:
        attributes[name].value.asObject = attributes[name].value.asObject.map(
          (x) => ({
            ...x,
            checked: x.id == valueInfo.id && valueInfo.checked,
          })
        );
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.group:
        attributes[name].value.asGroup = attributes[name].value.asGroup.map(
          (x) => ({
            ...x,
            checked: x.id == valueInfo.id && valueInfo.checked,
          })
        );
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.named_object:
        if (event.target.type === "text") {
          attributes[name].value.asNamedObject = {
            [valueInfo.key]: Object.values(
              attributes[name].value.asNamedObject
            )[0],
          };
        }
        if (event.target.type === "radio") {
          const key = Object.keys(attributes[name].value.asNamedObject)[0];
          attributes[name].value.asNamedObject[key] = attributes[
            name
          ].value.asNamedObject[key].map((x) => ({
            ...x,
            checked: x.id == valueInfo.id && valueInfo.checked,
          }));
        }
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.array_string:
        attributes[name].value.asArrayString[valueInfo.index] = valueInfo.value;
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.array_object:
        // In this case, new blank co-Attribute value will be added
        if (valueInfo.index >= attributes[name].value.asArrayObject.length) {
          attributes[name].value.asArrayObject.push(valueInfo.value);
        } else {
          attributes[name].value.asArrayObject[valueInfo.index] = attributes[
            name
          ].value.asArrayObject[valueInfo.index].map((x) => ({
            ...x,
            checked: x.id == valueInfo.id && valueInfo.checked,
          }));
        }
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.array_group:
        // In this case, new blank co-Attribute value will be added
        if (valueInfo.index >= attributes[name].value.asArrayGroup.length) {
          attributes[name].value.asArrayGroup.push(valueInfo.value);
        } else {
          attributes[name].value.asArrayGroup[valueInfo.index] = attributes[
            name
          ].value.asArrayGroup[valueInfo.index].map((x) => ({
            ...x,
            checked: x.id == valueInfo.id && valueInfo.checked,
          }));
        }
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.array_named_object:
        // In this case, new blank co-Attribute value will be added
        if (
          valueInfo.index >= attributes[name].value.asArrayNamedObject.length
        ) {
          attributes[name].value.asArrayNamedObject.push(valueInfo.value);
        } else {
          if (event.target.type === "text") {
            attributes[name].value.asArrayNamedObject[valueInfo.index] = {
              [valueInfo.key]: Object.values(
                attributes[name].value.asArrayNamedObject[valueInfo.index]
              )[0],
            };
          }
          if (event.target.type === "radio") {
            const key = Object.keys(
              attributes[name].value.asArrayNamedObject[valueInfo.index]
            )[0];
            attributes[name].value.asArrayNamedObject[valueInfo.index][key] =
              attributes[name].value.asArrayNamedObject[valueInfo.index][
                key
              ].map((x) => ({
                ...x,
                checked: x.id == valueInfo.id && valueInfo.checked,
              }));
          }
        }
        setAttributes({ ...attributes });
        break;
    }
  };

  const handleClickDeleteListItem = (attrName: string, index?: number) => {
    const attrType = attributes[attrName].type;
    if (index !== undefined) {
      switch (attrType) {
        case djangoContext.attrTypeValue.array_string:
          attributes[attrName].value.asArrayString.splice(index, 1);
          break;
        case djangoContext.attrTypeValue.array_object:
          attributes[attrName].value.asArrayObject.splice(index, 1);
          break;
        case djangoContext.attrTypeValue.array_named_object:
          attributes[attrName].value.asArrayNamedObject.splice(index, 1);
          break;
        case djangoContext.attrTypeValue.array_group:
          attributes[attrName].value.asArrayGroup.splice(index, 1);
          break;
        default:
          throw new Error(`${attrType} is not array-like type`);
      }
      setAttributes({ ...attributes });
    }
  };

  const handleNarrowDownGroups = async (
    e,
    attrName: string,
    attrType: number
  ) => {
    const refs = await aironeApiClientV2.getGroups();
    const userInputValue = e.target.value;

    const _getUpdatedValues = (currentValue) => {
      return refs
        .filter(
          (r) =>
            r.name.includes(userInputValue) ||
            currentValue.find((x) => x.id === r.id && x.checked)
        )
        .map((r) => ({
          id: r.id,
          name: r.name,
          checked: currentValue.find((x) => x.id == r.id)?.checked === true,
        }));
    };

    switch (attrType) {
      case djangoContext.attrTypeValue.group:
        attributes[attrName].value.asGroup = _getUpdatedValues(
          attributes[attrName].value.asGroup
        );
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.array_group:
        attributes[attrName].value.asArrayGroup = attributes[
          attrName
        ].value.asArrayGroup.map((curr) => _getUpdatedValues(curr));
        setAttributes({ ...attributes });
        break;
    }
  };

  const handleNarrowDownEntries = async (
    e,
    attrId: number,
    attrName: string,
    attrType: number
  ) => {
    const resp = await getAttrReferrals(attrId);
    const refs = await resp.json();
    const userInputValue = e.target.value;

    const _getUpdatedValues = (currentValue) => {
      return refs.results
        .filter(
          (r) =>
            r.name.includes(userInputValue) ||
            currentValue.find((x) => x.id === r.id && x.checked)
        )
        .map((r) => ({
          id: r.id,
          name: r.name,
          checked: currentValue.find((x) => x.id == r.id)?.checked === true,
        }));
    };

    switch (attrType) {
      case djangoContext.attrTypeValue.object:
        attributes[attrName].value.asObject = _getUpdatedValues(
          attributes[attrName].value.asObject
        );
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.array_object:
        attributes[attrName].value.asArrayObject = attributes[
          attrName
        ].value.asArrayObject.map((curr) => _getUpdatedValues(curr));
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.named_object:
        const attrKey = Object.keys(
          attributes[attrName].value.asNamedObject
        )[0];
        attributes[attrName].value.asNamedObject[attrKey] = _getUpdatedValues(
          attributes[attrName].value.asNamedObject[attrKey]
        );
        setAttributes({ ...attributes });
        break;

      case djangoContext.attrTypeValue.array_named_object:
        attributes[attrName].value.asArrayNamedObject = attributes[
          attrName
        ].value.asArrayNamedObject.map((curr) => {
          const attrKey = Object.keys(curr)[0];
          return { [attrKey]: _getUpdatedValues(curr[attrKey]) };
        });
        setAttributes({ ...attributes });
        break;
    }
  };

  const handleSubmit = async () => {
    const updatedAttr = Object.entries(attributes).map(([{}, attrValue]) => {
      switch (attrValue.type) {
        case djangoContext.attrTypeValue.string:
        case djangoContext.attrTypeValue.text:
        case djangoContext.attrTypeValue.date:
          return {
            id: attrValue.schema.id,
            value: attrValue.value.asString,
          };

        case djangoContext.attrTypeValue.boolean:
          return {
            id: attrValue.schema.id,
            value: attrValue.value.asBoolean,
          };

        case djangoContext.attrTypeValue.object:
          return {
            id: attrValue.schema.id,
            value:
              attrValue.value.asObject.filter((x) => x.checked)[0].id ?? "",
          };

        case djangoContext.attrTypeValue.group:
          return {
            id: attrValue.schema.id,
            value: attrValue.value.asGroup.filter((x) => x.checked)[0].id ?? "",
          };

        case djangoContext.attrTypeValue.named_object:
          return {
            id: attrValue.schema.id,
            value: {
              id:
                Object.values(attrValue.value.asNamedObject)[0].filter(
                  (x) => x.checked
                )[0].id ?? "",
              name: Object.keys(attrValue.value.asNamedObject)[0],
            },
          };

        case djangoContext.attrTypeValue.array_string:
          return {
            id: attrValue.schema.id,
            value: attrValue.value.asArrayString,
          };

        case djangoContext.attrTypeValue.array_object:
          return {
            id: attrValue.schema.id,
            value: attrValue.value.asArrayObject.map((x) => {
              return x.filter((y) => y.checked)[0]?.id ?? "";
            }),
          };

        case djangoContext.attrTypeValue.array_group:
          return {
            id: attrValue.schema.id,
            value: attrValue.value.asArrayGroup.map((x) => {
              return x.filter((y) => y.checked)[0]?.id ?? "";
            }),
          };

        case djangoContext.attrTypeValue.array_named_object:
          return {
            id: attrValue.schema.id,
            value: attrValue.value.asArrayNamedObject.map((x) => {
              return {
                id: Object.values(x)[0].filter((y) => y.checked)[0]?.id ?? "",
                name: Object.keys(x)[0],
              };
            }),
          };
      }
    });

    if (entryId == undefined) {
      await aironeApiClientV2.createEntry(entityId, name, updatedAttr);
      history.push(entityEntriesPath(entityId));
    } else {
      await aironeApiClientV2.updateEntry(entryId, name, updatedAttr);
      history.go(0);
    }
  };

  return (
    <div>
      {/* ^ FIXME form??? */}
      <button onClick={handleSubmit}>submit</button>
      <Box className="row">
        <Box className="col">
          <Table className="table table-bordered">
            <TableBody>
              <TableRow>
                <TableCell>エントリ名</TableCell>
                <TableCell>
                  <Input
                    type="text"
                    defaultValue={name}
                    onChange={(e) => setName(e.target.value)}
                  />
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </Box>
      </Box>
      <Table className="table table-bordered">
        <TableHead>
          <TableRow>
            <TableCell>属性</TableCell>
            <TableCell>属性値</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {Object.keys(attributes).map((attributeName, index) => (
            <TableRow key={index}>
              <TableCell>{attributeName}</TableCell>
              <TableCell>
                <EditAttributeValue
                  attrName={attributeName}
                  attrInfo={attributes[attributeName]}
                  handleChangeAttribute={handleChangeAttribute}
                  handleNarrowDownEntries={handleNarrowDownEntries}
                  handleNarrowDownGroups={handleNarrowDownGroups}
                  handleClickDeleteListItem={handleClickDeleteListItem}
                />
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
      <strong>(*)</strong> は必須項目
    </div>
  );
};

import AddIcon from "@mui/icons-material/Add";
import DeleteOutlineIcon from "@mui/icons-material/DeleteOutline";
import { Box, IconButton, Typography } from "@mui/material";
import React, { FC } from "react";
import { Control, Controller } from "react-hook-form";
import { UseFormSetValue } from "react-hook-form/dist/types/form";
import { useAsync } from "react-use";

import { aironeApiClientV2 } from "../../../apiclient/AironeApiClientV2";
import { Group } from "../../../apiclient/autogenerated";

import { Schema } from "./EntryFormSchema";
import { ReferralLikeAutocomplete } from "./ReferralLikeAutocomplete";

interface CommonProps {
  attrName: string;
  index?: number;
  control: Control<Schema>;
  setValue: UseFormSetValue<Schema>;
  handleClickDeleteListItem?: (index: number) => void;
  handleClickAddListItem?: (index: number) => void;
}

export const GroupAttributeValueField: FC<
  CommonProps & {
    multiple?: boolean;
    disabled?: boolean;
  }
> = ({
  multiple,
  attrName,
  index,
  disabled,
  control,
  setValue,
  handleClickAddListItem,
  handleClickDeleteListItem,
}) => {
  const groups = useAsync(async () => {
    const _groups = await aironeApiClientV2.getGroups();
    // FIXME inject current values
    return _groups.map((g) => ({ id: g.id, name: g.name }));
  }, []);

  // FIXME support multiple
  const handleChange = (
    value: { id: number; name: string } | { id: number; name: string }[] | null
  ) => {
    const newValue: any = (() => {
      if (value == null) {
        return undefined;
      }
      if (multiple === true) {
        const _value = value as Group[];
        return _value.map((v) => ({
          ...v,
        }));
      } else {
        const _value = value as Group;
        return {
          ..._value,
        };
      }
    })();

    setValue(`attrs.${attrName}.value.asGroup`, newValue as never, {
      shouldDirty: true,
      shouldValidate: true,
    });
  };

  return (
    <Box>
      <Typography variant="caption" color="rgba(0, 0, 0, 0.6)">
        グループを選択
      </Typography>
      <Box display="flex" alignItems="center">
        <Controller
          name={`attrs.${attrName}.value.asGroup`}
          control={control}
          render={({ field, fieldState: { error } }) => (
            <ReferralLikeAutocomplete
              multiple={multiple}
              options={groups.value ?? []}
              value={field.value ?? null}
              handleChange={handleChange}
              setKeyword={() => {}}
            />
          )}
        />
        {index !== undefined && (
          <>
            {handleClickDeleteListItem != null && (
              <IconButton
                disabled={disabled}
                sx={{ mx: "20px" }}
                onClick={() => handleClickDeleteListItem(index)}
              >
                <DeleteOutlineIcon />
              </IconButton>
            )}
            {handleClickAddListItem != null && (
              <IconButton onClick={() => handleClickAddListItem(index)}>
                <AddIcon />
              </IconButton>
            )}
          </>
        )}
      </Box>
    </Box>
  );
};

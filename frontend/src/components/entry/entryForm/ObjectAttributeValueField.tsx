import AddIcon from "@mui/icons-material/Add";
import DeleteOutlineIcon from "@mui/icons-material/DeleteOutline";
import {
  Autocomplete,
  Box,
  IconButton,
  TextField,
  Typography,
} from "@mui/material";
import React, { FC, useState } from "react";
import { Control, Controller, useWatch } from "react-hook-form";
import { UseFormSetValue } from "react-hook-form/dist/types/form";
import { useAsync } from "react-use";

import { aironeApiClientV2 } from "../../../apiclient/AironeApiClientV2";
import { GetEntryAttrReferral } from "../../../apiclient/autogenerated";

import { Schema } from "./EntryFormSchema";

interface CommonProps {
  attrName: string;
  schemaId: number;
  index?: number;
  multiple?: boolean;
  control: Control<Schema>;
  setValue: UseFormSetValue<Schema>;
  handleClickDeleteListItem?: (index: number) => void;
  handleClickAddListItem?: (index: number) => void;
}

export const ObjectAttributeValueField: FC<
  CommonProps & {
    objectName?: string;
    disabled?: boolean;
  }
> = ({
  multiple,
  attrName,
  schemaId,
  index,
  disabled,
  control,
  setValue,
  handleClickAddListItem,
  handleClickDeleteListItem,
  objectName,
}) => {
  // TODO give it via props explicitly???
  const fieldSuffix = (() => {
    if (objectName != null) {
      return `asNamedObject.${objectName}`;
    }
    if (multiple === true) {
      return "asArrayObject";
    }
    return "asObject";
  })();

  const [keyword, setKeyword] = useState("");

  const referrals = useAsync(async () => {
    const _referrals = await aironeApiClientV2.getEntryAttrReferrals(
      schemaId,
      keyword
    );
    // FIXME inject current values
    return _referrals;
  }, [schemaId, keyword]);

  // FIXME better typing
  const handleChange = (
    value: GetEntryAttrReferral | GetEntryAttrReferral[] | null
  ) => {
    const newValue: any = (() => {
      if (value == null) {
        return undefined;
      }
      if (multiple === true) {
        const _value = value as GetEntryAttrReferral[];
        return _value.map((v) => ({
          ...v,
          // FIXME remove it??
          schema: { id: 0, name: "" },
          _boolean: false,
        }));
      } else {
        const _value = value as GetEntryAttrReferral;
        return {
          ..._value,
          // FIXME remove it??
          schema: { id: 0, name: "" },
          _boolean: false,
        };
      }
    })();

    setValue(`attrs.${attrName}.value.${fieldSuffix}`, newValue as never, {
      shouldDirty: true,
      shouldValidate: true,
    });
  };

  return (
    <Box>
      <Typography variant="caption" color="rgba(0, 0, 0, 0.6)">
        エントリを選択
      </Typography>
      <Box display="flex" alignItems="center">
        <Controller
          name={`attrs.${attrName}.value.${fieldSuffix}`}
          control={control}
          render={({ field, fieldState: { error } }) => (
            <Autocomplete
              {...field}
              sx={{ width: "280px" }}
              multiple={multiple}
              options={referrals.value ?? []}
              getOptionLabel={(option) => option.name}
              isOptionEqualToValue={(option, value) => option.id === value.id}
              onChange={(_e, value) => handleChange(value)}
              onInputChange={(e, value) =>
                // To run only if the user changes
                e != null && setKeyword(value)
              }
              renderInput={(params) => (
                <TextField
                  {...params}
                  error={error != null}
                  helperText={error?.message}
                  size="small"
                  placeholder={multiple ? "" : "-NOT SET-"}
                />
              )}
            />
          )}
        />
        {index !== undefined && (
          <>
            {handleClickDeleteListItem != null && (
              <IconButton
                disabled={disabled}
                sx={{ mx: "20px" }}
                onClick={() => handleClickDeleteListItem(index)}
              >
                <DeleteOutlineIcon />
              </IconButton>
            )}
            {handleClickAddListItem != null && (
              <IconButton onClick={() => handleClickAddListItem(index)}>
                <AddIcon />
              </IconButton>
            )}
          </>
        )}
      </Box>
    </Box>
  );
};

export const NamedObjectAttributeValueField: FC<
  CommonProps & {
    disabled?: boolean;
  }
> = ({
  multiple,
  attrName,
  schemaId,
  index,
  disabled,
  control,
  setValue,
  handleClickAddListItem,
  handleClickDeleteListItem,
}) => {
  const value = useWatch({
    control,
    name: `attrs.${attrName}.value.asNamedObject`,
  });
  const objectName = Object.keys(value ?? {})[0] ?? "";

  const handleChangeObjectName = (newName: string) => {
    setValue(
      `attrs.${attrName}.value.asNamedObject`,
      {
        // FIXME update zod schema to allow undefined
        [newName]: value?.[objectName] ?? undefined,
      },
      {
        shouldDirty: true,
        shouldValidate: true,
      }
    );
  };

  return (
    <Box display="flex" alignItems="flex-end">
      <Box display="flex" flexDirection="column">
        <Typography variant="caption" color="rgba(0, 0, 0, 0.6)">
          name
        </Typography>
        <Box width="280px" mr="32px">
          <TextField
            variant="standard"
            value={objectName}
            onChange={(e) => handleChangeObjectName(e.target.value)}
          />
        </Box>
      </Box>
      <ObjectAttributeValueField
        attrName={attrName}
        schemaId={schemaId}
        control={control}
        setValue={setValue}
        objectName={objectName}
      />
    </Box>
  );
};

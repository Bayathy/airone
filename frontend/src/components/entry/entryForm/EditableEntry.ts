import {
  EntryRetrieveAttrs,
  EntryRetrieveValueAsObject,
  EntryRetrieveValueAsObjectSchema,
} from "../../../apiclient/autogenerated";
import { DjangoContext } from "../../../utils/DjangoContext";

type WithChecked = {
  checked: boolean;
};

// FIXME 'checked' flag should be no longer needed
export type EditableEntryAttrValueObject = Array<
  EntryRetrieveValueAsObject & WithChecked
>;
export type EditableEntryAttrValueGroup = Array<
  EntryRetrieveValueAsObjectSchema & WithChecked
>;
export type EditableEntryAttrValueNamedObject = {
  [key: string]: EditableEntryAttrValueObject;
};
type EditableEntryAttrValueArrayObject = Array<EditableEntryAttrValueObject>;
type EditableEntryAttrValueArrayNamedObject = Array<{
  [key: string]: EditableEntryAttrValueObject;
}>;
type EditableEntryAttrValueArrayGroup = Array<EditableEntryAttrValueGroup>;

type EditableEntryAttrValue = {
  asObject?: EntryRetrieveValueAsObject;
  asString?: string;
  asNamedObject?: EditableEntryAttrValueNamedObject;
  asArrayObject?: EditableEntryAttrValueArrayObject;
  asArrayString?: Array<string>;
  asArrayNamedObject?: EditableEntryAttrValueArrayNamedObject;
  asArrayGroup?: EditableEntryAttrValueArrayGroup;
  asBoolean?: boolean;
  asGroup?: EditableEntryAttrValueGroup;
};

export type EditableEntry = {
  name: string;
  attrs: Record<string, EditableEntryAttrs>;
};

export type EditableEntryAttrs = Pick<
  EntryRetrieveAttrs,
  "id" | "type" | "isMandatory" | "schema"
> & {
  value: EditableEntryAttrValue;
};

export const initializeEditableEntryAttr = (
  attrs: EntryRetrieveAttrs[]
): Record<string, EditableEntryAttrs> => {
  const djangoContext = DjangoContext.getInstance();

  return Object.fromEntries(
    attrs.map((attr): [string, EditableEntryAttrs] => {
      switch (attr.type) {
        case djangoContext.attrTypeValue.group:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asGroup: [
                  {
                    ...attr.value.asGroup,
                    checked: true,
                  },
                ],
              },
            },
          ];

        case djangoContext.attrTypeValue.object:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asObject: attr.value.asObject,
              },
            },
          ];

        case djangoContext.attrTypeValue.named_object:
          const name = Object.keys(attr.value.asNamedObject)[0];
          const value = attr.value.asNamedObject[name];

          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asNamedObject: {
                  [name]: [
                    {
                      id: value.id,
                      name: value.name,
                      checked: true,
                    },
                  ],
                },
              },
            },
          ];

        case djangoContext.attrTypeValue.array_group:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asArrayGroup: attr.value.asArrayGroup.map((val) => [
                  {
                    ...val,
                    checked: true,
                  },
                ]),
              },
            },
          ];

        case djangoContext.attrTypeValue.array_object:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asArrayObject: attr.value.asArrayObject.map((val) => [
                  {
                    ...val,
                    checked: true,
                  },
                ]),
              },
            },
          ];

        case djangoContext.attrTypeValue.array_named_object:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asArrayNamedObject: attr.value.asArrayNamedObject.map((val) => {
                  const name = Object.keys(val)[0];
                  const value = val[name];
                  return {
                    [name]: [
                      {
                        ...value,
                        checked: true,
                      },
                    ],
                  };
                }),
              },
            },
          ];

        case djangoContext.attrTypeValue.array_string:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: { asArrayString: attr.value.asArrayString },
            },
          ];

        case djangoContext.attrTypeValue.boolean:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: { asBoolean: attr.value.asBoolean },
            },
          ];

        default:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: { asString: attr.value.asString },
            },
          ];
      }
    })
  );
};

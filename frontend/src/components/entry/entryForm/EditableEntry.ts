import {
  EntryRetrieveAttrs,
  EntryRetrieveValueAsObject,
  EntryRetrieveValueAsObjectSchema,
} from "../../../apiclient/autogenerated";
import { DjangoContext } from "../../../utils/DjangoContext";

// FIXME unnecessary???
type EditableEntryAttrValue = {
  asObject?: EntryRetrieveValueAsObject;
  asString?: string;
  asNamedObject?: { [key: string]: EntryRetrieveValueAsObject };
  asArrayObject?: Array<EntryRetrieveValueAsObject>;
  asArrayString?: Array<string>;
  asArrayNamedObject?: Array<{ [key: string]: EntryRetrieveValueAsObject }>;
  asArrayGroup?: Array<EntryRetrieveValueAsObjectSchema>;
  asBoolean?: boolean;
  asGroup?: EntryRetrieveValueAsObjectSchema;
};

export type EditableEntry = {
  name: string;
  attrs: Record<string, EditableEntryAttrs>;
};

export type EditableEntryAttrs = Pick<
  EntryRetrieveAttrs,
  "id" | "type" | "isMandatory" | "schema"
> & {
  value: EditableEntryAttrValue;
};

// FIXME unnecessary???
export const initializeEditableEntryAttr = (
  attrs: EntryRetrieveAttrs[]
): Record<string, EditableEntryAttrs> => {
  const djangoContext = DjangoContext.getInstance();

  return Object.fromEntries(
    attrs.map((attr): [string, EditableEntryAttrs] => {
      switch (attr.type) {
        case djangoContext.attrTypeValue.group:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asGroup: attr.value.asGroup,
              },
            },
          ];

        case djangoContext.attrTypeValue.object:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asObject: attr.value.asObject,
              },
            },
          ];

        case djangoContext.attrTypeValue.named_object:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asNamedObject: attr.value.asNamedObject,
              },
            },
          ];

        case djangoContext.attrTypeValue.array_group:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asArrayGroup: attr.value.asArrayGroup,
              },
            },
          ];

        case djangoContext.attrTypeValue.array_object:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asArrayObject: attr.value.asArrayObject,
              },
            },
          ];

        case djangoContext.attrTypeValue.array_named_object:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: {
                asArrayNamedObject: attr.value.asArrayNamedObject,
              },
            },
          ];

        case djangoContext.attrTypeValue.array_string:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: { asArrayString: attr.value.asArrayString },
            },
          ];

        case djangoContext.attrTypeValue.boolean:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: { asBoolean: attr.value.asBoolean },
            },
          ];

        default:
          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: { asString: attr.value.asString },
            },
          ];
      }
    })
  );
};

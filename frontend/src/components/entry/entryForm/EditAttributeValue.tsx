import {
  Button,
  Box,
  Checkbox,
  Input,
  List,
  ListItem,
  Typography,
  TextField,
  Autocomplete,
} from "@mui/material";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";
import { DesktopDatePicker } from "@mui/x-date-pickers/DesktopDatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import React, { FC, useEffect, useState } from "react";

import { EditableEntryAttrs } from "./EditableEntry";

import { aironeApiClientV2 } from "apiclient/AironeApiClientV2";
import {
  EntryRetrieveValueAsObject,
  EntryRetrieveValueAsObjectSchema,
} from "apiclient/autogenerated";
import { getAttrReferrals } from "utils/AironeAPIClient";
import { DjangoContext } from "utils/DjangoContext";

interface CommonProps {
  attrName: string;
  attrType: number;
  index?: number;
  handleChange: (attrName: string, attrType: number, valueInfo: any) => void;
}

const ElemString: FC<
  CommonProps & {
    attrValue: string;
    handleClickDeleteListItem: (attrName: string, index?: number) => void;
    multiline?: boolean;
  }
> = ({
  attrName,
  attrValue,
  attrType,
  index,
  handleChange,
  handleClickDeleteListItem,
  multiline,
}) => {
  return (
    <Box display="flex" width="100%">
      <Input
        type="text"
        value={attrValue}
        onChange={(e) =>
          handleChange(attrName, attrType, {
            index: index,
            value: e.target.value,
          })
        }
        fullWidth
        multiline={multiline}
      />
      {index !== undefined && (
        <Button
          sx={{ ml: "16px" }}
          variant="outlined"
          onClick={() => handleClickDeleteListItem(attrName, index)}
        >
          del
        </Button>
      )}
    </Box>
  );
};

const ElemBool: FC<CommonProps & { attrValue: boolean }> = ({
  attrName,
  attrValue,
  attrType,
  handleChange,
}) => {
  return (
    <Checkbox
      checked={attrValue}
      onChange={(e) =>
        handleChange(attrName, attrType, {
          index: undefined,
          checked: e.target.checked,
        })
      }
    />
  );
};

const ElemRefferal: FC<
  CommonProps & {
    multiple?: boolean;
    attrValue:
      | EntryRetrieveValueAsObject
      | Array<EntryRetrieveValueAsObject>
      | EntryRetrieveValueAsObjectSchema
      | Array<EntryRetrieveValueAsObjectSchema>;
    schemaId?: number;
    handleClickDeleteListItem?: (attrName: string, index?: number) => void;
  }
> = ({
  multiple = false,
  attrName,
  attrValue,
  attrType,
  schemaId,
  index,
  handleChange,
  handleClickDeleteListItem,
}) => {
  const [keyword, setKeyword] = useState("");
  const [referrals, setReferrals] = useState([]);

  const djangoContext = DjangoContext.getInstance();

  useEffect(() => {
    if (Number(attrType) & Number(djangoContext.attrTypeValue.object)) {
      // FIXME Implement and use API V2
      // TODO call it reactively to avoid loading API???
      getAttrReferrals(schemaId, keyword).then((resp) => {
        resp.json().then((data) => {
          const addReferrals = [];

          // Filter duplicate referrals.
          data.results.forEach((result) => {
            if (!referrals.map((referral) => referral.id).includes(result.id)) {
              addReferrals.push(result);
            }
          });

          // Add current attr value to referrals.
          if (multiple) {
            (attrValue as Array<EntryRetrieveValueAsObject>).forEach(
              (value) => {
                if (
                  !referrals.map((referral) => referral.id).includes(value.id)
                ) {
                  addReferrals.push(value);
                }
              }
            );
          } else {
            if (attrValue) {
              if (
                !referrals
                  .map((referral) => referral.id)
                  .includes((attrValue as EntryRetrieveValueAsObject).id)
              ) {
                addReferrals.push(attrValue);
              }
            }
          }

          setReferrals(referrals.concat(addReferrals));
        });
      });
    } else {
      aironeApiClientV2.getGroups().then((resp) => {
        const addReferrals = [];

        // Filter duplicate referrals.
        resp.forEach((result) => {
          if (!referrals.map((referral) => referral.id).includes(result.id)) {
            addReferrals.push(result);
          }
        });

        setReferrals(referrals.concat(addReferrals));
      });
    }
  }, [keyword]);

  return (
    <Box>
      <Typography variant="caption" color="rgba(0, 0, 0, 0.6)">
        {Number(attrType) & Number(djangoContext.attrTypeValue.object)
          ? "エントリを選択"
          : "グループを選択"}
      </Typography>
      <Box display="flex" alignItems="center">
        <Autocomplete
          sx={{ width: "280px" }}
          multiple={multiple}
          options={referrals}
          getOptionLabel={(option) => option.name}
          isOptionEqualToValue={(option, value) => option.id === value?.id}
          value={attrValue ?? null}
          onChange={(e, value) => {
            handleChange(attrName, attrType, {
              index: index,
              value: value,
            });
          }}
          onInputChange={(e, value) => {
            // To run only if the user changes
            if (e) {
              setKeyword(value);
            }
          }}
          renderInput={(params) => (
            <TextField
              {...params}
              size="small"
              placeholder={
                multiple &&
                (
                  attrValue as
                    | Array<EntryRetrieveValueAsObject>
                    | Array<EntryRetrieveValueAsObjectSchema>
                ).length
                  ? ""
                  : "-NOT SET-"
              }
            />
          )}
        />
        {index !== undefined && (
          <Button
            sx={{ ml: "16px" }}
            variant="outlined"
            onClick={() => handleClickDeleteListItem(attrName, index)}
          >
            del
          </Button>
        )}
      </Box>
    </Box>
  );
};

const ElemNamedObject: FC<
  CommonProps & {
    attrValue?: { [key: string]: EntryRetrieveValueAsObject };
    schemaId: number;
    handleClickDeleteListItem?: (attrName: string, index?: number) => void;
  }
> = ({
  attrName,
  attrValue,
  attrType,
  schemaId,
  index,
  handleChange,
  handleClickDeleteListItem,
}) => {
  const key = attrValue ? Object.keys(attrValue)[0] : "";
  return (
    <Box display="flex" alignItems="flex-end">
      <Box display="flex" flexDirection="column">
        <Typography variant="caption" color="rgba(0, 0, 0, 0.6)">
          name
        </Typography>
        <Box width="280px" mr="32px">
          <TextField
            variant="standard"
            value={key}
            onChange={(e) =>
              handleChange(attrName, attrType, {
                index: index,
                key: e.target.value,
                ...attrValue[key],
              })
            }
          />
        </Box>
      </Box>
      <ElemRefferal
        schemaId={schemaId}
        attrName={attrName}
        attrValue={attrValue ? attrValue[key] : undefined}
        attrType={attrType}
        index={index}
        handleChange={handleChange}
        handleClickDeleteListItem={handleClickDeleteListItem}
      />
    </Box>
  );
};

const ElemDate: FC<
  CommonProps & {
    attrValue: string;
    handleClickDeleteListItem: (attrName: string, index?: number) => void;
  }
> = ({ attrName, attrValue, attrType, handleChange }) => {
  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <DesktopDatePicker
        label="月日を選択"
        inputFormat="yyyy/MM/dd"
        value={new Date(attrValue)}
        onChange={(date: Date) => {
          handleChange(attrName, attrType, {
            value: `${date.getFullYear()}-${
              date.getMonth() + 1
            }-${date.getDate()}`,
          });
        }}
        renderInput={(params) => <TextField {...params} />}
      />
    </LocalizationProvider>
  );
};

interface Props {
  attrName: string;
  attrInfo: EditableEntryAttrs;
  handleChangeAttribute: (
    attrName: string,
    attrType: number,
    valueInfo: any
  ) => void;
  handleClickDeleteListItem: (attrName: string, index?: number) => void;
}

export const EditAttributeValue: FC<Props> = ({
  attrName,
  attrInfo,
  handleChangeAttribute,
  handleClickDeleteListItem,
}) => {
  const djangoContext = DjangoContext.getInstance();

  const handleClickAddListItem = (e, value) => {
    const index = (() => {
      switch (attrInfo.type) {
        case djangoContext.attrTypeValue.array_string:
          return attrInfo.value?.asArrayString?.length;
        case djangoContext.attrTypeValue.array_object:
          return attrInfo.value?.asArrayObject?.length;
        case djangoContext.attrTypeValue.array_named_object:
          return attrInfo.value?.asArrayNamedObject?.length;
        case djangoContext.attrTypeValue.array_group:
          return attrInfo.value?.asArrayGroup?.length;
        default:
          throw new Error(`${attrInfo.type} is not array-like type`);
      }
    })();
    handleChangeAttribute(attrName, attrInfo.type, {
      index: index ?? 0,
      value: value,
    });
  };

  switch (attrInfo.type) {
    case djangoContext.attrTypeValue.string:
      return (
        <ElemString
          attrName={attrName}
          attrValue={attrInfo.value.asString}
          attrType={attrInfo.type}
          handleChange={handleChangeAttribute}
          handleClickDeleteListItem={handleClickDeleteListItem}
        />
      );

    case djangoContext.attrTypeValue.text:
      return (
        <ElemString
          attrName={attrName}
          attrValue={attrInfo.value.asString}
          attrType={attrInfo.type}
          handleChange={handleChangeAttribute}
          handleClickDeleteListItem={handleClickDeleteListItem}
          multiline
        />
      );

    case djangoContext.attrTypeValue.date:
      return (
        <ElemDate
          attrName={attrName}
          attrValue={attrInfo.value.asString}
          attrType={attrInfo.type}
          handleChange={handleChangeAttribute}
          handleClickDeleteListItem={handleClickDeleteListItem}
        />
      );

    case djangoContext.attrTypeValue.boolean:
      return (
        <ElemBool
          attrName={attrName}
          attrValue={attrInfo.value.asBoolean}
          attrType={attrInfo.type}
          handleChange={handleChangeAttribute}
        />
      );

    case djangoContext.attrTypeValue.object:
      return (
        <ElemRefferal
          attrName={attrName}
          attrValue={attrInfo.value.asObject}
          attrType={attrInfo.type}
          schemaId={attrInfo.schema.id}
          handleChange={handleChangeAttribute}
        />
      );

    case djangoContext.attrTypeValue.group:
      return (
        <ElemRefferal
          attrName={attrName}
          attrValue={attrInfo.value.asGroup}
          attrType={attrInfo.type}
          handleChange={handleChangeAttribute}
        />
      );

    case djangoContext.attrTypeValue.named_object:
      return (
        <ElemNamedObject
          attrName={attrName}
          attrValue={attrInfo.value.asNamedObject}
          attrType={attrInfo.type}
          schemaId={attrInfo.schema.id}
          handleChange={handleChangeAttribute}
        />
      );

    case djangoContext.attrTypeValue.array_object:
      return (
        <ElemRefferal
          multiple={true}
          attrName={attrName}
          attrValue={attrInfo.value.asArrayObject}
          attrType={attrInfo.type}
          schemaId={attrInfo.schema.id}
          handleChange={handleChangeAttribute}
        />
      );

    case djangoContext.attrTypeValue.array_group:
      return (
        <ElemRefferal
          multiple={true}
          attrName={attrName}
          attrValue={attrInfo.value.asArrayGroup}
          attrType={attrInfo.type}
          handleChange={handleChangeAttribute}
        />
      );

    case djangoContext.attrTypeValue.array_string:
      return (
        <Box>
          <Button
            variant="contained"
            color="primary"
            onClick={(e) => handleClickAddListItem(e, "")}
          >
            add
          </Button>
          <List>
            {attrInfo.value.asArrayString?.map((info, n) => (
              <ListItem key={n}>
                <ElemString
                  attrName={attrName}
                  attrValue={info}
                  attrType={attrInfo.type}
                  index={n}
                  handleChange={handleChangeAttribute}
                  handleClickDeleteListItem={handleClickDeleteListItem}
                />
              </ListItem>
            ))}
          </List>
        </Box>
      );

    case djangoContext.attrTypeValue.array_named_object:
      return (
        <Box>
          <Button
            variant="contained"
            color="primary"
            onClick={(e) => handleClickAddListItem(e, { "": null })}
          >
            add
          </Button>
          <List>
            {attrInfo.value.asArrayNamedObject?.map((info, n) => (
              <ListItem key={n}>
                <ElemNamedObject
                  attrName={attrName}
                  attrValue={info}
                  attrType={attrInfo.type}
                  schemaId={attrInfo.schema.id}
                  index={n}
                  handleChange={handleChangeAttribute}
                  handleClickDeleteListItem={handleClickDeleteListItem}
                />
              </ListItem>
            ))}
          </List>
        </Box>
      );
  }
};

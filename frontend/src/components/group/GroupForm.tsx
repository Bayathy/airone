import {
  Autocomplete,
  Box,
  Input,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  TextField,
  Theme,
  Typography,
} from "@mui/material";
import { makeStyles } from "@mui/styles";
import React, { FC, useState } from "react";
import { useHistory } from "react-router-dom";
import { useAsync } from "react-use";

import { aironeApiClientV2 } from "../../apiclient/AironeApiClientV2";

import { Group, RoleUser } from "apiclient/autogenerated";

const useStyles = makeStyles<Theme>((theme) => ({
  button: {
    margin: theme.spacing(1),
  },
}));

interface Props {
  group: Group;
  setGroup: (group: Group) => void;
}

export const GroupForm: FC<Props> = ({ group, setGroup }) => {
  const classes = useStyles();
  const history = useHistory();

  const [userKeyword, setUserKeyword] = useState("");

  const users = useAsync(async () => {
    const _users = await aironeApiClientV2.getUsers(1, userKeyword);
    return _users.results?.map(
      (user): RoleUser => ({ id: user.id, username: user.username })
    );
  }, [userKeyword]);

  return (
    <Box>
      <Box>
        <Table className="table table-bordered">
          <TableHead>
            <TableRow sx={{ backgroundColor: "#455A64" }}>
              <TableCell sx={{ color: "#FFFFFF" }}>項目</TableCell>
              <TableCell sx={{ color: "#FFFFFF" }}>内容</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            <TableRow>
              <TableCell>
                <Typography>グループ名</Typography>
              </TableCell>
              <TableRow>
                <Input
                  value={group.name}
                  onChange={(e) => setGroup({ name: e.target.value, ...group })}
                  required
                />
              </TableRow>
            </TableRow>
            <TableRow>
              <TableCell>登録ユーザ</TableCell>
              <TableCell>
                <Autocomplete
                  renderInput={(params) => (
                    <TextField {...params} variant="outlined" />
                  )}
                  options={users.value ?? []}
                  getOptionLabel={(option: any) => option.username}
                  value={[]}
                  onChange={(_, value: RoleUser[]) => {
                    /* FIXME */
                  }}
                  isOptionEqualToValue={(option, value) =>
                    option.id === value.id
                  }
                  inputValue={userKeyword}
                  onInputChange={(_, value: string) => setUserKeyword(value)}
                  multiple
                />
              </TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </Box>
      {/* FIXME parent group */}
    </Box>
  );
};

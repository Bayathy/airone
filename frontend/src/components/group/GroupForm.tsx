import {
  Autocomplete,
  Box,
  Divider,
  Input,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  TextField,
  Typography,
} from "@mui/material";
import React, { FC, useState } from "react";
import { useAsync } from "react-use";

import { GroupTreeRoot } from "./GroupTreeRoot";

import { aironeApiClientV2 } from "apiclient/AironeApiClientV2";
import { Group, GroupMember } from "apiclient/autogenerated";
import { Loading } from "components/common/Loading";

interface Props {
  group: Group;
  setGroup: (group: Group) => void;
}

export const GroupForm: FC<Props> = ({ group, setGroup }) => {
  const [userKeyword, setUserKeyword] = useState("");

  const users = useAsync(async () => {
    const _users = await aironeApiClientV2.getUsers(1, userKeyword);
    return _users.results?.map(
      (user): GroupMember => ({ id: user.id, username: user.username })
    );
  }, [userKeyword]);

  const groupTrees = useAsync(async () => {
    return await aironeApiClientV2.getGroupTrees();
  });

  return (
    <Box>
      <Table className="table table-bordered">
        <TableHead>
          <TableRow sx={{ backgroundColor: "#455A64" }}>
            <TableCell sx={{ color: "#FFFFFF" }}>項目</TableCell>
            <TableCell sx={{ color: "#FFFFFF" }}>内容</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell>
              <Typography>グループ名</Typography>
            </TableCell>
            <TableCell>
              <Input
                value={group.name}
                onChange={(e) =>
                  setGroup({
                    ...group,
                    name: e.target.value,
                  })
                }
                sx={{ width: "100%" }}
              />
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell>
              <Typography>登録ユーザ</Typography>
            </TableCell>
            <TableCell>
              <Autocomplete
                renderInput={(params) => (
                  <TextField {...params} variant="outlined" />
                )}
                options={users.value ?? []}
                getOptionLabel={(option: GroupMember) => option.username}
                value={group.members}
                onChange={(_, value: GroupMember[]) => {
                  setGroup({
                    ...group,
                    members: value,
                  });
                }}
                isOptionEqualToValue={(option: GroupMember, value) =>
                  option.id === value.id
                }
                inputValue={userKeyword}
                onInputChange={(_, value: string) => setUserKeyword(value)}
                multiple
              />
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
      <Box my="32px">
        <Typography variant="h4" align="center" my="16px">
          所属グループ
        </Typography>
        <Typography variant="h6" align="center" my="16px">
          直下となるグループにチェックマークを入れてください。独立グループの場合は未選択のまま保存してください。
        </Typography>
      </Box>
      <Divider sx={{ mt: "16px" }} />
      {groupTrees.loading ? (
        <Loading />
      ) : (
        <GroupTreeRoot
          groupTrees={groupTrees.value ?? []}
          selectedGroupId={group.parentGroup ?? null}
          handleSelectGroupId={(groupId: number | null) =>
            setGroup({
              ...group,
              parentGroup: groupId,
            })
          }
        />
      )}
    </Box>
  );
};

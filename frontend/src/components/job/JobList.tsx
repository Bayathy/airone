import {
  Box,
  Button,
  Link,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Theme,
  Typography,
} from "@mui/material";
import { makeStyles } from "@mui/styles";
import React, { FC } from "react";
import { useHistory } from "react-router-dom";

import { JobSerializers } from "../../apiclient/autogenerated";
import { cancelJob, rerunJob } from "../../utils/AironeAPIClient";
import { formatDate } from "../../utils/DateUtil";
import { Confirmable } from "../common/Confirmable";

const JOB_STATUS = {
  PREPARING: 1,
  DONE: 2,
  ERROR: 3,
  TIMEOUT: 4,
  PROCESSING: 5,
  CANCELED: 6,
};

const JOB_OPERATION = {
  CREATE_ENTRY: 1,
  EDIT_ENTRY: 2,
  DELETE_ENTRY: 3,
  COPY_ENTRY: 4,
  IMPORT_ENTRY: 5,
  EXPORT_ENTRY: 6,
  RESTORE_ENTRY: 7,
  EXPORT_SEARCH_RESULT: 8,
  REGISTER_REFERRALS: 9,
  CREATE_ENTITY: 10,
  EDIT_ENTITY: 11,
  DELETE_ENTITY: 12,
  NOTIFY_CREATE_ENTRY: 13,
  NOTIFY_UPDATE_ENTRY: 14,
  NOTIFY_DELETE_ENTRY: 15,
  DO_COPY_ENTRY: 16,
  IMPORT_ENTRY_V2: 17,
};

const useStyles = makeStyles<Theme>((theme) => ({
  button: {
    margin: theme.spacing(1),
  },
  entityName: {
    margin: theme.spacing(1),
  },
  tableRow: {
    "&:nth-of-type(odd)": {
      backgroundColor: "white",
    },
    "&:nth-of-type(even)": {
      backgroundColor: "#607D8B0A",
    },
  },
}));

interface Props {
  jobs: JobSerializers[];
}

export const JobList: FC<Props> = ({ jobs }) => {
  const classes = useStyles();
  const history = useHistory();

  const handleRerun = async (jobId: number) => {
    await rerunJob(jobId);
    history.go(0);
  };

  const handleCancel = async (jobId: number) => {
    await cancelJob(jobId);
    history.go(0);
  };

  return (
    <Table>
      <TableHead>
        <TableRow sx={{ backgroundColor: "#455A64" }}>
          <TableCell sx={{ color: "#FFFFFF" }}>対象エントリ</TableCell>
          <TableCell sx={{ color: "#FFFFFF" }}>状況</TableCell>
          <TableCell sx={{ color: "#FFFFFF" }}>操作</TableCell>
          <TableCell sx={{ color: "#FFFFFF" }}>実行時間</TableCell>
          <TableCell sx={{ color: "#FFFFFF" }}>実行日時</TableCell>
          <TableCell sx={{ color: "#FFFFFF" }}>備考</TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {jobs.map((job) => (
          <TableRow key={job.id} className={classes.tableRow}>
            <TableCell>
              <Typography>{job.target?.name ?? ""}</Typography>
            </TableCell>
            <TableCell>
              <Box display="flex" alignItems="center">
                <Box display="flex" alignItems="center">
                  {(() => {
                    switch (job.status) {
                      case JOB_STATUS.PREPARING:
                        return (
                          <>
                            <Box
                              width="16px"
                              height="16px"
                              mx="4px"
                              sx={{
                                backgroundColor: "white",
                                borderRadius: "8px",
                              }}
                            />
                            <Typography>処理前</Typography>
                          </>
                        );
                      case JOB_STATUS.DONE:
                        return (
                          <>
                            <Box
                              width="16px"
                              height="16px"
                              mx="4px"
                              sx={{
                                backgroundColor: "#607D8B",
                                borderRadius: "8px",
                              }}
                            />
                            <Typography>完了</Typography>
                          </>
                        );
                      case JOB_STATUS.ERROR:
                        return (
                          <>
                            <Box
                              width="16px"
                              height="16px"
                              mx="4px"
                              sx={{
                                backgroundColor: "#B00020",
                                borderRadius: "8px",
                              }}
                            />
                            <Typography>失敗</Typography>
                          </>
                        );
                      case JOB_STATUS.TIMEOUT:
                        return (
                          <>
                            <Box
                              width="16px"
                              height="16px"
                              mx="4px"
                              sx={{
                                backgroundColor: "#B00020",
                                borderRadius: "8px",
                              }}
                            />
                            <Typography>タイムアウト</Typography>
                          </>
                        );
                      case JOB_STATUS.PROCESSING:
                        return (
                          <>
                            <Box
                              width="16px"
                              height="16px"
                              mx="4px"
                              sx={{
                                backgroundColor: "#90CAF9",
                                borderRadius: "8px",
                              }}
                            />
                            <Typography>処理中</Typography>
                          </>
                        );
                      case JOB_STATUS.CANCELED:
                        return (
                          <>
                            <Box
                              width="16px"
                              height="16px"
                              mx="4px"
                              sx={{
                                backgroundColor: "#607D8B",
                                borderRadius: "8px",
                              }}
                            />
                            <Typography>キャンセル</Typography>
                          </>
                        );
                      default:
                        return (
                          <>
                            <Box
                              width="16px"
                              height="16px"
                              mx="4px"
                              sx={{
                                backgroundColor: "black",
                                borderRadius: "8px",
                              }}
                            />
                            <Typography>不明</Typography>
                          </>
                        );
                    }
                  })()}
                </Box>
                <Box mx="12px">
                  {![
                    JOB_STATUS.DONE,
                    JOB_STATUS.PROCESSING,
                    JOB_STATUS.CANCELED,
                  ].includes(job.status) && (
                    <Button
                      variant="contained"
                      color="error"
                      className={classes.button}
                      onClick={() => handleRerun(job.id)}
                    >
                      再実行
                    </Button>
                  )}
                  {![JOB_STATUS.DONE, JOB_STATUS.CANCELED].includes(
                    job.status
                  ) && (
                    <Confirmable
                      componentGenerator={(handleOpen) => (
                        <Button
                          variant="contained"
                          color="secondary"
                          className={classes.button}
                          onClick={handleOpen}
                        >
                          キャンセル
                        </Button>
                      )}
                      dialogTitle="本当にキャンセルしますか？"
                      onClickYes={() => handleCancel(job.id)}
                    />
                  )}
                </Box>
              </Box>
            </TableCell>
            <TableCell>
              {(() => {
                switch (job.operation) {
                  case JOB_OPERATION.CREATE_ENTRY:
                  case JOB_OPERATION.CREATE_ENTITY:
                    return <Typography>作成</Typography>;
                  case JOB_OPERATION.EDIT_ENTRY:
                  case JOB_OPERATION.EDIT_ENTITY:
                    return <Typography>編集</Typography>;
                  case JOB_OPERATION.DELETE_ENTITY:
                  case JOB_OPERATION.DELETE_ENTRY:
                    return <Typography>削除</Typography>;
                  case JOB_OPERATION.IMPORT_ENTRY:
                  case JOB_OPERATION.IMPORT_ENTRY_V2:
                    return <Typography>インポート</Typography>;
                  case JOB_OPERATION.EXPORT_ENTRY:
                  case JOB_OPERATION.EXPORT_SEARCH_RESULT:
                    return <Typography>エクスポート</Typography>;
                  case JOB_OPERATION.COPY_ENTRY:
                  case JOB_OPERATION.DO_COPY_ENTRY:
                    return <Typography>コピー</Typography>;
                  case JOB_OPERATION.RESTORE_ENTRY:
                    return <Typography>復旧</Typography>;
                  default:
                    return <Typography>不明</Typography>;
                }
              })()}
            </TableCell>
            <TableCell>
              <Typography>{job.passedTime} s</Typography>
            </TableCell>
            <TableCell>
              <Typography>{formatDate(job.createdAt)}</Typography>
            </TableCell>
            <TableCell>
              {(job.operation == JOB_OPERATION.EXPORT_ENTRY ||
                job.operation == JOB_OPERATION.EXPORT_SEARCH_RESULT) &&
              job.status == JOB_STATUS.DONE ? (
                <Link href={`/job/download/${job.id}`}>Download</Link>
              ) : (
                <Typography>{job.text}</Typography>
              )}
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};

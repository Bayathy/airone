import {
  EditableEntry,
  EditableEntryAttrs,
} from "../../components/entry/entryForm/EditableEntry";

import {
  EntryAttributeType,
} from "../../apiclient/autogenerated";

import { DjangoContext } from "../../utils/DjangoContext";




const djangoContext = DjangoContext.getInstance();

// Convert Entry information from server-side value to presentation format.
// (NOTE) It might be needed to be refactored because if server returns proper format with frontend, this is not necessary.
export function formalizeEntryInfo(entry, excludeAttrs) {
  return {
    name: entry.value.name,
    attrs: Object.fromEntries(
      entry.value.attrs
        .filter((attr) => !excludeAttrs.includes(attr.schema.name))
        .filter((attr) => attr.schema.id != 0)
        .map((attr): [string, EditableEntryAttrs] => {
          function getAttrValue(attr: EntryAttributeType) {
            switch (attr.type) {
              case djangoContext?.attrTypeValue.array_string:
                return attr.value?.asArrayString?.length ?? 0 > 0
                  ? attr.value
                  : { asArrayString: [""] };
              case djangoContext?.attrTypeValue.array_named_object:
                return attr.value?.asArrayNamedObject?.length ?? 0 > 0
                  ? attr.value
                  : { asArrayNamedObject: [{ "": null }] };
              default:
                return attr.value;
            }
          }

          return [
            attr.schema.name,
            {
              id: attr.id,
              type: attr.type,
              isMandatory: attr.isMandatory,
              schema: attr.schema,
              value: getAttrValue(attr),
            },
          ];
        })
    ),
  };
}

export function initializeEntryInfo(entity) {
  return {
    name: "",
    attrs: Object.fromEntries(
      entity.value.attrs.map((attr): [string, EditableEntryAttrs] => [
        attr?.name ?? "",
        {
          id: attr.id,
          type: attr.type,
          isMandatory: attr.isMandatory,
          schema: {
            id: attr.id,
            name: attr.name,
          },
          value: {
            asString: "",
            asBoolean: false,
            asObject: null,
            asGroup: null,
            asRole: null,
            asNamedObject: { "": null },
            asArrayString: [""],
            asArrayObject: [],
            asArrayGroup: [],
            asArrayRole: [],
            asArrayNamedObject: [{ "": null }],
          },
        },
      ])
    ),
  }
}

import { Box, Typography } from "@mui/material";
import React, { FC, useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { useHistory } from "react-router-dom";
import { useAsync } from "react-use";

import { entitiesPath, entityEntriesPath, topPath } from "Routes";
import { aironeApiClientV2 } from "apiclient/AironeApiClientV2";
import { EntityUpdate, Webhook } from "apiclient/autogenerated";
import { AironeBreadcrumbs } from "components/common/AironeBreadcrumbs";
import { Loading } from "components/common/Loading";
import { PageHeader } from "components/common/PageHeader";
import { EntityForm } from "components/entity/EntityForm";
import { useTypedParams } from "hooks/useTypedParams";

export const EditEntityPage: FC = () => {
  const { entityId } = useTypedParams<{ entityId: number }>();
  const history = useHistory();

  const [entityInfo, setEntityInfo] = useState<EntityUpdate>({
    id: 0,
    name: "",
    note: "",
    isToplevel: false,
    webhooks: [],
    attrs: [],
  });

  const entity = useAsync(async () => {
    if (entityId !== undefined) {
      return await aironeApiClientV2.getEntity(entityId);
    } else {
      return undefined;
    }
  });

  const referralEntities = useAsync(async () => {
    const entities = await aironeApiClientV2.getEntities();
    return entities.results;
  });

  const [submittable, setSubmittable] = useState<boolean>(false);

  const handleCancel = () => {
    history.replace(entitiesPath());
  };
  const handleSubmit = async () => {
    console.log("handleSubmit");
    const createMode = entityId === undefined;
    // Adjusted attributes for the API
    const attrs = entityInfo.attrs
      .filter((attr) => attr.id != null || !attr.isDeleted)
      .map((attr, index) => {
        return {
          id: attr.id,
          name: attr.name,
          type: attr.type,
          index: index,
          isMandatory: attr.isMandatory,
          isDeleteInChain: attr.isDeleteInChain,
          isSummarized: attr.isSummarized,
          referral: attr.referral,
        };
      });
    const webhooks = entityInfo.webhooks.map((webhook): Webhook => {
      return {
        id: webhook.id,
        url: webhook.url,
        label: webhook.label,
        isEnabled: webhook.isEnabled,
        isVerified: undefined,
        headers: webhook.headers,
      };
    });
    console.log("webhooks", webhooks);

    if (createMode) {
      await aironeApiClientV2.createEntity(
        entityInfo.name,
        entityInfo.note,
        entityInfo.isToplevel,
        attrs,
        webhooks
      );
      history.replace(entitiesPath());
    } else {
      console.log("updateEntity");
      await aironeApiClientV2.updateEntity(
        entityId,
        entityInfo.name,
        entityInfo.note,
        entityInfo.isToplevel,
        attrs,
        webhooks
      );
      history.replace(entityEntriesPath(entityId));
    }
  };

  useEffect(() => {
    if (!entity.loading && entity.value !== undefined) {
      setEntityInfo({
        ...entity.value,
        attrs:
          entity.value.attrs.map((attr) => {
            return { ...attr, referral: attr.referral.map((r) => r.id) };
          }) ?? [],
      });
    }
  }, [entity]);

  if (entity.loading || referralEntities.loading) {
    return <Loading />;
  }

  return (
    <Box>
      <AironeBreadcrumbs>
        <Typography component={Link} to={topPath()}>
          Top
        </Typography>
        <Typography component={Link} to={entitiesPath()}>
          エンティティ一覧
        </Typography>
        {entityId && (
          <Typography component={Link} to={entityEntriesPath(entityId)}>
            {entity?.value?.name ?? ""}
          </Typography>
        )}
        <Typography color="textPrimary">
          {entityId ? "エンティティ編集" : "新規エンティティの作成"}
        </Typography>
      </AironeBreadcrumbs>

      {/* TODO z-index, position: fixed, margin-top, background-color */}
      <PageHeader
        isSubmittable={submittable}
        handleSubmit={handleSubmit}
        handleCancel={handleCancel}
      >
        {entity?.value != null
          ? entity.value.name + "の編集"
          : "新規エンティティの作成"}
      </PageHeader>

      <Box sx={{ marginTop: "111px", paddingLeft: "10%", paddingRight: "10%" }}>
        <EntityForm
          entity={entity.value}
          entityInfo={entityInfo}
          setEntityInfo={setEntityInfo}
          referralEntities={referralEntities.value}
          setSubmittable={setSubmittable}
        />
      </Box>
    </Box>
  );
};

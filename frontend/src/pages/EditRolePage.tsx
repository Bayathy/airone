import { Box, Container, Typography } from "@mui/material";
import { useSnackbar } from "notistack";
import React, { FC, useCallback, useEffect } from "react";
import { useForm } from "react-hook-form";
import { Link, Prompt, useHistory } from "react-router-dom";
import { useAsync } from "react-use";

import { Role, RoleCreateUpdate } from "../apiclient/autogenerated";
import { Loading } from "../components/common/Loading";
import { PageHeader } from "../components/common/PageHeader";
import { RoleForm } from "../components/role/RoleForm";
import { useTypedParams } from "../hooks/useTypedParams";

import { topPath, rolesPath } from "Routes";
import { aironeApiClientV2 } from "apiclient/AironeApiClientV2";
import { AironeBreadcrumbs } from "components/common/AironeBreadcrumbs";
import { SubmitButton } from "components/common/SubmitButton";

export const EditRolePage: FC = () => {
  const history = useHistory();
  const { enqueueSnackbar } = useSnackbar();
  const { roleId } = useTypedParams<{ roleId?: number }>();

  // FIXME validation
  // TODO try to validate values with zod
  const {
    formState: { isDirty, isSubmitted, isSubmitting },
    handleSubmit,
    reset,
    setValue,
    getValues,
    control,
  } = useForm<Role>();

  const role = useAsync(async () => {
    return await aironeApiClientV2.getRole(roleId);
  }, [roleId]);

  useEffect(() => {
    !role.loading && role.value != null && reset(role.value);
  }, [role.value]);

  const handleSubmitOnValid = useCallback(
    async (role: Role) => {
      const roleCreateUpdate: RoleCreateUpdate = {
        ...role,
        users: role.users.map((user) => user.id),
        groups: role.groups.map((group) => group.id),
        adminUsers: role.adminUsers.map((user) => user.id),
        adminGroups: role.adminGroups.map((group) => group.id),
      };

      if (roleId == null) {
        try {
          await aironeApiClientV2.createRole(roleCreateUpdate);
          enqueueSnackbar("ロールの作成に成功しました", {
            variant: "success",
          });
          history.push(rolesPath());
        } catch (e) {
          enqueueSnackbar(`ロールの作成に失敗しました。`, {
            variant: "error",
          });
        }
      } else {
        try {
          await aironeApiClientV2.updateRole(roleId, roleCreateUpdate);
          enqueueSnackbar("ロールの更新に成功しました", {
            variant: "success",
          });
          history.push(rolesPath());
        } catch (e) {
          enqueueSnackbar(`ロールの更新に失敗しました。`, {
            variant: "error",
          });
        }
      }
    },
    [roleId]
  );

  const handleCancel = async () => {
    history.goBack();
  };

  if (role.loading) {
    return <Loading />;
  }

  return (
    <Box className="container-fluid">
      <AironeBreadcrumbs>
        <Typography component={Link} to={topPath()}>
          Top
        </Typography>
        <Typography component={Link} to={rolesPath()}>
          ロール管理
        </Typography>
        <Typography color="textPrimary">ロール編集</Typography>
      </AironeBreadcrumbs>

      <PageHeader
        title={role.value != null ? role.value.name : "新規ロールの作成"}
        description={role.value != null ? "ロール編集" : undefined}
      >
        <SubmitButton
          name="保存"
          disabled={isSubmitting || isSubmitted} // FIXME check validation state
          handleSubmit={handleSubmit(handleSubmitOnValid)}
          handleCancel={handleCancel}
        />
      </PageHeader>

      <Container>
        <RoleForm control={control} setValue={setValue} getValues={getValues} />
      </Container>

      <Prompt
        when={isDirty && !isSubmitting && !isSubmitted}
        message="編集した内容は失われてしまいますが、このページを離れてもよろしいですか？"
      />
    </Box>
  );
};

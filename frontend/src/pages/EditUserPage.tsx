import { Box, Typography, Button } from "@mui/material";
import React, { FC, useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { useHistory } from "react-router-dom";
import { useAsync } from "react-use";

import { aironeApiClientV2 } from "../apiclient/AironeApiClientV2";
import { useTypedParams } from "../hooks/useTypedParams";

import { topPath, usersPath } from "Routes";
import { UserRetrieve } from "apiclient/autogenerated";
import { AironeBreadcrumbs } from "components/common/AironeBreadcrumbs";
import { Loading } from "components/common/Loading";
import { PageHeader } from "components/common/PageHeader";
import { UserForm } from "components/user/UserForm";
import { DjangoContext } from "utils/DjangoContext";
import { FailedToGetUser, UnAuthorizedToGetUser } from "utils/Exceptions";

export const EditUserPage: FC = () => {
  const { userId } = useTypedParams<{ userId: number }>();
  const history = useHistory();

  const user = useAsync(async () => {
    if (userId) {
      try {
        return await aironeApiClientV2.getUser(userId);
      } catch (error) {
        console.log("error", error);
        if (error.status === 403) {
          console.log("UnAuthorizedToGetUser");
          throw new UnAuthorizedToGetUser(
            "Failed to get User from AirOne APIv2 endpoint"
          );
        } else {
          console.log("FailedToGetUser");
          throw new FailedToGetUser(
            "Failed to get User from AirOne APIv2 endpoint"
          );
        }
      }
    }
  });
  if (!user.loading && user.error) {
    throw user.error;
  }

  const djangoContext = DjangoContext.getInstance();

  const [userInfo, setUserInfo] = useState<UserRetrieve>({
    id: 0,
    username: "",
    email: "",
    isSuperuser: false,
    dateJoined: "",
    token: {
      value: "",
      lifetime: 86400,
      expire: "",
      created: "",
    },
    authenticateType: djangoContext.userAuthenticateType.local,
  });

  useEffect(() => {
    if (!user.loading && user.value !== undefined) {
      setUserInfo(user.value);
    }
  }, [user]);

  const handleSubmit = () => {
    // FIXME: There is no component to edit password. Therefore, this handler send request
    //        with arbitrary password("hoge") to AirOne.
    aironeApiClientV2.createUser(
      userInfo.username,
      userInfo.email,
      "hoge",
      userInfo.isSuperuser
    );
  };

  return (
    <Box>
      <AironeBreadcrumbs>
        <Typography component={Link} to={topPath()}>
          Top
        </Typography>
        <Typography component={Link} to={usersPath()}>
          ユーザ管理
        </Typography>
        <Typography color="textPrimary">ユーザ情報の設定</Typography>
      </AironeBreadcrumbs>
      <PageHeader
        title={"ユーザ情報の設定"}
        subTitle={""}
        componentSubmits={
          <Box display="flex" justifyContent="center">
            <Box mx="4px">
              <Button
                variant="contained"
                color="secondary"
                onClick={handleSubmit}
              >
                保存
              </Button>
            </Box>
            <Box mx="4px">
              <Button
                variant="outlined"
                color="primary"
                onClick={() => history.replace(usersPath())}
              >
                キャンセル
              </Button>
            </Box>
          </Box>
        }
      />

      {user.loading ? (
        <Loading />
      ) : (
        <UserForm userInfo={userInfo} setUserInfo={setUserInfo} />
      )}
    </Box>
  );
};

/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  Entity,
  EntityFromJSON,
  EntityToJSON,
  PaginatedEntityList,
  PaginatedEntityListFromJSON,
  PaginatedEntityListToJSON,
} from "../models";

export interface EntityApiV2EntitiesListRequest {
  isTopLevel?: boolean;
  limit?: number;
  offset?: number;
  query?: string;
}

export interface EntityApiV2EntitiesRetrieveRequest {
  id: number;
  isTopLevel?: boolean;
  query?: string;
}

/**
 *
 */
export class EntityApi extends runtime.BaseAPI {
  /**
   */
  async entityApiV2EntitiesListRaw(
    requestParameters: EntityApiV2EntitiesListRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<PaginatedEntityList>> {
    const queryParameters: any = {};

    if (requestParameters.isTopLevel !== undefined) {
      queryParameters["is_top_level"] = requestParameters.isTopLevel;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.query !== undefined) {
      queryParameters["query"] = requestParameters.query;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/entities`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PaginatedEntityListFromJSON(jsonValue)
    );
  }

  /**
   */
  async entityApiV2EntitiesList(
    requestParameters: EntityApiV2EntitiesListRequest = {},
    initOverrides?: RequestInit
  ): Promise<PaginatedEntityList> {
    const response = await this.entityApiV2EntitiesListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async entityApiV2EntitiesRetrieveRaw(
    requestParameters: EntityApiV2EntitiesRetrieveRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Entity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling entityApiV2EntitiesRetrieve."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.isTopLevel !== undefined) {
      queryParameters["is_top_level"] = requestParameters.isTopLevel;
    }

    if (requestParameters.query !== undefined) {
      queryParameters["query"] = requestParameters.query;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/entities/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityFromJSON(jsonValue)
    );
  }

  /**
   */
  async entityApiV2EntitiesRetrieve(
    requestParameters: EntityApiV2EntitiesRetrieveRequest,
    initOverrides?: RequestInit
  ): Promise<Entity> {
    const response = await this.entityApiV2EntitiesRetrieveRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
